name: üè∑Ô∏è Auto Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'README.md'

# SOLUCI√ìN: A√±adir permisos expl√≠citos
permissions:
  contents: write
  actions: read

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'Bump version to') }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        # SOLUCI√ìN: Usar fetch-depth 0 y configurar Git correctamente
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: üîß Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git config --global push.default current
        
    - name: üî¢ Bump version
      id: bump
      run: |
        echo "=== Starting version bump process ==="
        
        # Verificar que los archivos existen
        if [ ! -f "index.html" ]; then
          echo "ERROR: index.html not found"
          exit 1
        fi
        
        if [ ! -f "package.json" ]; then
          echo "ERROR: package.json not found"
          exit 1
        fi
        
        # Extraer versi√≥n actual del package.json (m√°s confiable)
        CURRENT=$(grep -o '"version": "[^"]*"' package.json | sed 's/"version": "//' | sed 's/"//')
        echo "Current version from package.json: $CURRENT"
        
        # Verificar que la versi√≥n tiene formato correcto
        if [[ ! $CURRENT =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "ERROR: Invalid version format: $CURRENT"
          exit 1
        fi
        
        # Separar componentes de la versi√≥n
        IFS='.' read -r major minor patch <<< "$CURRENT"
        echo "Parsed - Major: $major, Minor: $minor, Patch: $patch"
        
        # Incrementar seg√∫n el tipo de versi√≥n (si viene de workflow_dispatch)
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        if [ -z "$VERSION_TYPE" ]; then
          VERSION_TYPE="patch"
        fi
        
        case $VERSION_TYPE in
          major)
            NEW_VERSION="$((major + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$major.$((minor + 1)).0"
            ;;
          patch|*)
            NEW_VERSION="$major.$minor.$((patch + 1))"
            ;;
        esac
        
        echo "New version: $NEW_VERSION (type: $VERSION_TYPE)"
        
        # Verificar que la nueva versi√≥n es diferente
        if [ "$CURRENT" = "$NEW_VERSION" ]; then
          echo "ERROR: New version same as current"
          exit 1
        fi
        
        # Actualizar package.json
        echo "Updating package.json..."
        sed -i "s/\"version\": \"$CURRENT\"/\"version\": \"$NEW_VERSION\"/" package.json
        
        # Actualizar index.html - versi√≥n en header
        echo "Updating index.html header..."
        sed -i "s/app-version\">$CURRENT</app-version\">$NEW_VERSION</" index.html
        
        # Actualizar index.html - versi√≥n en metadatos
        echo "Updating index.html metadata..."
        sed -i "s/'Versi√≥n del Sistema': '$CURRENT'/'Versi√≥n del Sistema': '$NEW_VERSION'/" index.html
        
        # Verificar que los cambios se aplicaron
        NEW_PKG_VERSION=$(grep -o '"version": "[^"]*"' package.json | sed 's/"version": "//' | sed 's/"//')
        NEW_HTML_VERSION=$(grep -o 'app-version">[^<]*' index.html | sed 's/app-version">//')
        
        echo "Verification:"
        echo "  package.json version: $NEW_PKG_VERSION"
        echo "  index.html version: $NEW_HTML_VERSION"
        
        if [ "$NEW_PKG_VERSION" != "$NEW_VERSION" ] || [ "$NEW_HTML_VERSION" != "$NEW_VERSION" ]; then
          echo "ERROR: Version update failed"
          exit 1
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "=== Version bump completed successfully ==="
        
    - name: üíæ Commit and push version bump
      run: |
        # Verificar si hay cambios
        if git diff --quiet && git diff --cached --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Hacer commit y push
        git add index.html package.json
        git commit -m "üîñ Bump version to ${{ steps.bump.outputs.version }}"
        
        # Intentar push con retry
        for i in {1..3}; do
          echo "Push attempt $i..."
          if git push origin main; then
            echo "Push successful!"
            break
          else
            echo "Push failed, retrying in 5 seconds..."
            sleep 5
            git pull --rebase origin main
          fi
        done
